(define visual7
    (class object%
        (super-new)
        
        (field (vertex0 0))
        (field (vertex1 0))
        
        (field (tex_a (load-texture "lights.png")))
        (field (tex_b (load-texture "lights.png")))
        (field (tex_c (load-texture "invaders/invader10.png")))
        (field (tex_d (load-texture "plus.png")))
        
        (field (vis_gain 1))
        (field (vis_blur 0))
        
        (define/public (initialize)
            
            (gain vis_gain)    
            (blur vis_blur)
            
            (osc-send "/gaincontrol/x" "f" (list (/ vis_gain 10)))  ; send a message to this destination
            
            (set! vertex0 (build-ribbon 100))
            (set! vertex1 (build-particles 100))
            
            (with-primitive vertex0
                (hint-unlit)
                (wire-colour (vector 0.1 0 0))
                
                (pdata-map!
                    
                    
                    (lambda (x)
                        (vmul (grndvec) 50)
                        )
                    "p"
                    )
                
                (pdata-map!
                    
                    (lambda (x)
                        1
                        )
                    "w"
                    )
                
                
                ;(hint-wire)
                (line-width 2)
                (pdata-copy "p" "pos")
                (colour (vector 1 1 1)) 
                ;(texture tex_a) 
                
                )
            
            
            (with-primitive vertex1
                
                
                (blend-mode 'src-alpha 'dst-alpha)
                
                ;(colour (vector 1 1 1))
                ;(hint-none)
                ;(hint-wire)
                ;(line-width 2)
                ;(line-colour (vector 1 0 0))
                (colour (vector 1 1 1))  
                ;(texture tex_b) 
                (pdata-map!
                    (lambda (x)
                        10
                        )
                    "s"
                    )
                
                
                
                
                (pdata-map!
                    (lambda (x)
                        (vector 1 1 1)  
                        )
                    "c"
                    )
                
                )
            
            
            )
        
        (define/public (update)
            (gain vis_grain)
            (blur vis_blur)
            )    
        
        (define/public (setgain value)
            (set! vis_gain value)
            (gain vis_gain)           
            )
        
        (define/public (setblur value)
            (set! vis_blur value)  
            
            )
        
        (define/public (draw)
            
            (cond ((eqv? vertex0 0)
                    (initialize))
                )
            
            (with-state
                ;(rotate (vector (gh 2) 0 0))
                (with-primitive vertex0
                    (rotate (vector (* (delta) (gh 2)) 0 0))
                    (ortho)
                    
                    (pdata-index-map!
                        (lambda (idx x)
                            (with-primitive vertex1
                                ;(cond [(> (/ (gh 2) 1) 60) (texture tex_b)]
                                    ;      [else (texture tex_d)])
                                (pdata-set! "s" idx (/ (gh idx) 6))
                                (pdata-set! "p" idx x)
                                )
                            x
                            
                            )
                        "p"
                        )
                    (pdata-index-map!
                        (lambda (idx x)
                            (/ (gh idx) 16)  
                            )
                        "w"
                        )
                    
                    (pdata-index-map!
                        (lambda (idx x)
                            (vadd (pdata-ref "pos" idx) (vmul (pdata-ref "pos" idx) (/ (gh idx) 100)))  
                            )
                        "p"
                        )    
                    
                    )
                )
            
            )
        
        (define/public (kill)
            
            (destroy vertex0)
            (destroy vertex1)
            
            (set! vertex0 0)
            (set! vertex1 0)
            
            )
        
        (initialize)
        )
    )
